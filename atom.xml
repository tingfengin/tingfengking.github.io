<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>听风就是雨🌧️~</title>
  
  <subtitle>一个程序媛和一个web狗的成长记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://twitr.cn/"/>
  <updated>2018-08-20T08:29:10.000Z</updated>
  <id>https://twitr.cn/</id>
  
  <author>
    <name>听风就是雨🌧️~</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用钉钉和IFTTT做一个安全资讯实时监控</title>
    <link href="https://twitr.cn/2018/08/20/%E5%88%A9%E7%94%A8%E9%92%89%E9%92%89%E5%92%8CIFTTT%E5%81%9A%E4%B8%80%E4%B8%AA%E5%AE%89%E5%85%A8%E8%B5%84%E8%AE%AF%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7/"/>
    <id>https://twitr.cn/2018/08/20/利用钉钉和IFTTT做一个安全资讯实时监控/</id>
    <published>2018-08-20T07:47:51.000Z</published>
    <updated>2018-08-20T08:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>分享一个最近GET到的一个小方法<br><br>最近这段时间一直在忙扫描器，打算用钉钉接口来做预警，发现了<a href="https://ifttt.com/" target="_blank" rel="noopener">IFTTT</a></p><blockquote><p>关于IFTTT的介绍： <br><br>IFTTT，是一个新生的网络服务平台，通过其他不同平台的条件来决定是否执行下一条命令。即对网络服务通过其他网络服务作出反应。IFTTT得名为其口号“if this then that”。</p></blockquote><h2 id="注册企业用户的钉钉"><a href="#注册企业用户的钉钉" class="headerlink" title="注册企业用户的钉钉"></a>注册企业用户的钉钉</h2><p>注册就不说了，打开PC版钉钉 开启群机器人拿到api<br><img src="./1.png" alt=""></p><h2 id="注册IFTTT"><a href="#注册IFTTT" class="headerlink" title="注册IFTTT"></a>注册IFTTT</h2><p>注册成功后，新建一个APPlet：<img src="./2.png" alt=""><br>点击this-&gt;RSS Reed-&gt;New feed item-&gt;添加要订阅的RSS地址-&gt;that-&gt;Webhooks-&gt;Make a web request-&gt;填入API等。<br><img src="./3.png" alt=""><br>效果如下：<br><img src="./4.png" alt=""></p><blockquote><p>推荐一些安全资讯RSS<br><br>Exploit-DB Updates <a href="https://www.exploit-db.com/rss.xml" target="_blank" rel="noopener">https://www.exploit-db.com/rss.xml</a><br><br>Paper <a href="http://paper.seebug.org/rss/" target="_blank" rel="noopener">http://paper.seebug.org/rss/</a><br><br>Sec-News 安全文摘 <a href="https://wiki.ioin.in/atom" target="_blank" rel="noopener">https://wiki.ioin.in/atom</a><br><br>Vulnerability Lab (Index） <a href="https://www.vulnerability-lab.com/rss/rss.php" target="_blank" rel="noopener">https://www.vulnerability-lab.com/rss/rss.php</a><br><br>安全技术社区 <a href="https://xz.aliyun.com/feed" target="_blank" rel="noopener">https://xz.aliyun.com/feed</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;分享一个最近GET到的一个小方法&lt;br&gt;&lt;br&gt;最近这段时间一直在忙扫描器，打算用钉钉接口来做预警，发现了&lt;a href=&quot;https:
      
    
    </summary>
    
    
      <category term="安全" scheme="https://twitr.cn/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="监控" scheme="https://twitr.cn/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Feei子域名扫描器的二次编写之异步程序介绍</title>
    <link href="https://twitr.cn/2018/08/15/Feei%E5%AD%90%E5%9F%9F%E5%90%8D%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E4%BA%8C%E6%AC%A1%E7%BC%96%E5%86%99%E4%B9%8B%E5%BC%82%E6%AD%A5%E7%A8%8B%E5%BA%8F%E4%BB%8B%E7%BB%8D/"/>
    <id>https://twitr.cn/2018/08/15/Feei子域名扫描器的二次编写之异步程序介绍/</id>
    <published>2018-08-15T07:29:15.000Z</published>
    <updated>2018-08-17T02:13:49.040Z</updated>
    
    <content type="html"><![CDATA[<p>上周，一个月黑风高的夜晚，百无聊赖的打开我的电脑，打算逛一逛大牛们的github，在看到了美丽联合Python大佬编写的子域名扫描器程序后，感觉到了<strong>异步框架+协程</strong>的强大，之前自己编写的程序没有用到过<strong>异步编程</strong>，所以打算看一下大牛的程序练练手。首先给大家介绍一下异步编程以及与它息息相关的基本概念，例如：多进程、多线程、协程、同步和异步等，基本知识点。那么先看一下本篇文章目录：</p><ul><li>了解异步编程以及紧密相关的概念，如非阻塞和阻塞、同步和异步、并发和并行等等</li><li>异步编程是什么？以及异步编程的困难之处？</li><li>为什么需要异步编程</li><li>如何从同步阻塞发展到异步非阻塞的？</li><li>掌握epoll + callback + Eventloop 是如何工作的？</li><li>Python是如何逐步从回调到生成器再到原生写成以及支持异步编程的？</li><li>掌握asyncio模块的工作原理？</li></ul><h2 id="一、引入异步编程相关概念"><a href="#一、引入异步编程相关概念" class="headerlink" title="一、引入异步编程相关概念"></a>一、引入异步编程相关概念</h2><p>在介绍异步编程之前，我们最好首先简单的了解一下与异步编程有关的相关基础概念：</p><p><em><strong>阻塞的概念：</strong></em></p><ul><li><p>程序在未得到所需计算资源被挂起的状态</p></li><li><p>程序在等待某个操作完成期间，自身无法继续干别的事情，则称该程序在该操作上是阻塞的</p></li><li><p>常见的阻塞形式有：网络I/O阻塞、磁盘I/O阻塞、用户输入阻塞等等</p></li></ul><p><em><strong>非阻塞的概念：</strong></em></p><ul><li><p>程序在等待某操作过程中，自身不被阻塞，可以继续运行干别的事情，则称该程序在该操作上是非阻塞的</p></li><li><p>非阻塞并不是在任何程序级别、任何情况下都可以存在的</p></li><li><p>仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态</p></li></ul><p><em><strong>同步的概念：</strong></em></p><ul><li><p>不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，称这些程序单元是同步执行的。</p></li><li><p>例如购物系统中更新商品库存，需要用“行锁”作为通信信号，让不同的更新请求强制排队顺序执行，那更新库存的操作是同步的。</p></li><li><p>简而言之，同步意味着有序</p></li></ul><p><em><strong>异步的概念：</strong></em></p><ul><li><p>为了完成某个任务，不同程序单元直接过程中无须通信协调，也能够完成任务的方式。</p></li><li><p>简而言之，异步则意味着无序。</p></li></ul><p><em><strong>并发的概念：</strong></em></p><ul><li><p>并发描述的是程序的组织结构。指程序要被设计成多个可独立执行的子任务。</p></li><li><p>以利用有限的计算机资源使多个任务可以被实时或者近实时执行为目的。</p></li></ul><p><em><strong>并行的概念：</strong></em></p><ul><li><p>并行描述的是程序的执行状态。指多个任务同时被执行。</p></li><li><p>以利用富于计算资源加速完成多个任务为目的。</p></li></ul><p><em><strong>异步编程的概念：</strong></em></p><ul><li>以进程、线程、协程、函数方法作为执行任务程序的基本单位，结合回调、事件循环、信号量等机制，以提高程序整体执行效率和并发能力的编程。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周，一个月黑风高的夜晚，百无聊赖的打开我的电脑，打算逛一逛大牛们的github，在看到了美丽联合Python大佬编写的子域名扫描器程序后，感觉到了&lt;strong&gt;异步框架+协程&lt;/strong&gt;的强大，之前自己编写的程序没有用到过&lt;strong&gt;异步编程&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="https://twitr.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>运用异步请求编写简单的渗透测试辅助工具</title>
    <link href="https://twitr.cn/2018/08/15/%E8%BF%90%E7%94%A8%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7/"/>
    <id>https://twitr.cn/2018/08/15/运用异步请求编写简单的渗透测试辅助工具/</id>
    <published>2018-08-15T06:44:14.000Z</published>
    <updated>2018-08-15T07:05:18.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>为了协助渗透测试信息收集的高效进行，开发一些简易的信息收集工具势在必得，现如今编写的很方便高效的工具有很多，所以编写一个工具不能够仅仅实现自己想要的功能，更重要的是优化工具的扫描速度，本次编写工具的背景针对IO密集型请求，采用异步请求方式。下面我们来看一下简单好用的小工具。</p><h1 id="二、简单了解Asyncio异步请求"><a href="#二、简单了解Asyncio异步请求" class="headerlink" title="二、简单了解Asyncio异步请求"></a>二、简单了解Asyncio异步请求</h1><p>我们想象一下下面的情景，如果访问1000个域名网站，并且获取每个网站的标题，如果采用非并发式编程，我们将会受到由网络请求速度、程序运行速度等多方面的影响，在等待相应的这段时间里我们并不能充分的利用我们的程序时间。我在本例没有采用多线程、多进程去实现我的程序，主要是想使用异步请求方式练手。异步请求在单线程里使用异步计算, 下载网页的时候和处理网页的时候是不连续的, 更有效利用了等待下载的这段时间。看到网上很多异步请求的参考资料，引用一下前辈的图，在此说明一下多线程与异步请求处理密集型IO操作的区别：<br><img src="./1.png" alt=""><br>传统的单线程下载处理网页可能就像下图(来源)左边蓝色那样, 计算机执行一些代码, 然后等待下载网页, 下好以后, 再执行一些代码… 或者在等待的时候, 用另外一个线程执行其他的代码, 这是多线程的手段. 那么 asyncio 就像右边, 只使用一个线程, 但是将这些等待时间统统掐掉, 下载应该都调到了后台, 这个时间里, 执行其他异步的功能, 下载好了之后, 再调回来接着往下执行。</p><h1 id="三、代码福利"><a href="#三、代码福利" class="headerlink" title="三、代码福利"></a>三、代码福利</h1><p>工具由于编写比较迅速，IP查询暂时并不支持全量真实IP查询，后边会完善，运行结果见文章最后。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Date: 2018-07-04</span></span><br><span class="line"><span class="string">    Author: Chensiyu</span></span><br><span class="line"><span class="string">    Readme: Tools domain request</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> ClientSession</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FunnyScan</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.s = <span class="string">""</span></span><br><span class="line">        self.title = <span class="string">""</span></span><br><span class="line">        self.tasks = []</span><br><span class="line">        self.url = []</span><br><span class="line">        self._www = <span class="string">"www"</span></span><br><span class="line">        self._http = <span class="string">"http"</span></span><br><span class="line">        self._https = <span class="string">"https"</span></span><br><span class="line">        self.loop = asyncio.get_event_loop()</span><br><span class="line">        self.regx = <span class="string">r"&lt;title&gt;[\s\S]*?&lt;/title&gt;"</span></span><br><span class="line">        self.file_objects = open(<span class="string">'./domain.txt'</span>, <span class="string">'r'</span>).readlines()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getHostByName</span><span class="params">(self, hostname)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        get hostname method</span></span><br><span class="line"><span class="string">        :param hostname:</span></span><br><span class="line"><span class="string">        :return: hostname by ip</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = socket.gethostbyname(hostname)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">            result = <span class="string">"error"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> result == <span class="string">'error'</span>:</span><br><span class="line">            regex = hostname.find(self._www)</span><br><span class="line">            <span class="keyword">if</span> regex == <span class="number">-1</span>:</span><br><span class="line">                self.s = <span class="string">'www.'</span> + hostname</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                result = socket.gethostbyname(self.s)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">                result = <span class="string">"error"</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self, u)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            task = asyncio.ensure_future(self.fetch(u))</span><br><span class="line">            <span class="keyword">await</span> asyncio.wait_for(task, timeout=<span class="number">2</span>)</span><br><span class="line">            self.tasks.append(task)</span><br><span class="line">            responses = <span class="keyword">await</span> asyncio.gather(*self.tasks)</span><br><span class="line">            <span class="keyword">for</span> res <span class="keyword">in</span> responses:</span><br><span class="line">                tag = re.findall(self.regx, res)</span><br><span class="line">                <span class="keyword">if</span> tag:</span><br><span class="line">                    self.title = tag[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.title = <span class="string">"无标题"</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">            self.title = <span class="string">"不存在 "</span> + str(error)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_https_list</span><span class="params">(self, domain)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param domain: domain</span></span><br><span class="line"><span class="string">        :return: https url</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        http = <span class="string">"https://"</span></span><br><span class="line">        hPos = domain.find(http)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hPos == <span class="number">-1</span>:</span><br><span class="line">            url_data = <span class="string">'https://'</span> + domain</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            url_data = domain</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> url_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> response.text(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> domain <span class="keyword">in</span> self.file_objects:</span><br><span class="line">            hostname = domain.replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">            ip = self.getHostByName(hostname)</span><br><span class="line">            self.loop.run_until_complete(asyncio.ensure_future(self.hello(self.get_https_list(hostname))))</span><br><span class="line">            print(hostname + <span class="string">": "</span> + ip + <span class="string">": "</span> + self.title)</span><br><span class="line"></span><br><span class="line">scan = FunnyScan()</span><br><span class="line">print(<span class="string">"Process start at "</span> + datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</span><br><span class="line">scan.main()</span><br><span class="line">print(<span class="string">"Process end at "</span> + datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</span><br></pre></td></tr></table></figure></p><p>程序运行之后的效果如下图：<br><img src="./2.png" alt=""><br>如果大家发现文章的瑕疵请给我评论，我会及时回复的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;为了协助渗透测试信息收集的高效进行，开发一些简易的信息收集工具势在必得，现如今编写的很方便高效的工具有很多，所以编写一个工具
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://twitr.cn/2018/08/14/hello-world/"/>
    <id>https://twitr.cn/2018/08/14/hello-world/</id>
    <published>2018-08-14T14:29:53.918Z</published>
    <updated>2018-08-14T14:29:53.918Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
